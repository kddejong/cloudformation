AWSTemplateFormatVersion: '2010-09-09'
Description: GitHub code tested and built using Code Deploy.
  Deployed by creating a ASG, creating a CodeDeploy environment for that ASG.
  Then flipping the ASGs for the ELB using the there can be only one methodology.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: App Code
      Parameters:
      - GitHubOwner
      - GitHubRepository
      - GitHubBranch
      - OAuthToken
    - Label:
        default: Infrastructure
      Parameters:
      - VpcId
      - ElbSubnets
    ParameterLabels:
      GitHubOwner:
        default: GitHub Organization
      GitHubRepository:
        default: GitHub Repository
      GitHubBranch:
        default: GitHub Branch
      ApplicationName:
        default: The name of the application
      OAuthToken:
        default: OAuth Token to talk to GitHub
      PackerVersion:
        default: Packer Version
      VpcId:
        default: VPC
      ElbSubnets:
        default: Subnets for ELB
Parameters:
  KeyPairName:
    AllowedPattern: '[\x20-\x7E]*'  # test
    ConstraintDescription: Can contain only ASCII characters.
    Description: Name of an existing Amazon EC2 key pair to enable SSH access to the
      instances.
    MaxLength: '255'
    MinLength: '1'
    Type: AWS::EC2::KeyPair::KeyName
  GitHubOwner:
    Description: The GitHub Owner name
    Type: String
  GitHubRepository:
    Description: The GitHub Project Name
    Type: String
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
  GitHubBranch:
    Description: The GitHub branch to used
    Type: String
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
    Default: master
  OAuthToken:
    Description: The OAuth Token
    Type: String
    NoEcho: true
  ApplicationName:
    Default: myApp
    Description: The of the Application being deployed
    Type: String
  ApplicationRole:
    Default: web
    Description: The role inside the application
    Type: String
  CodePipelineBucket:
    Description: The Code Pipeline Bucket
    Type: String
  NetworkPrefix:
    Description: The Prefix to the Network Exports
    Type: String
  BuildContainer:
    Description: The Code Build Container
    Type: String
  PackerVersion:
    Description: The version of Packer to use
    Type: String
    Default: 1.3.3
  ElbSubnets:
    Description: The subnets to be used for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: The VPC where resources will be deployed
    Type: AWS::EC2::VPC::Id
Resources:
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRolech

          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:UploadArchive
            - codecommit:GetUploadArchiveStatus
            - codecommit:CancelUploadArchive
            Effect: Allow
            Resource: '*'
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Effect: Allow
            Resource: '*'
          - Action:
            - s3:PutObject
            Effect: Allow
            Resource:
            - arn:aws:s3:::codepipeline*
            - arn:aws:s3:::elasticbeanstalk*
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Effect: Allow
            Resource: '*'
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            Resource:
              - !GetAtt CodeBuildProject.Arn
              - !GetAtt ImageBuildProject.Arn
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: !Sub 'codepipeline-service-${ApplicationName}'
  BuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            Effect: Allow
            Resource: 'arn:aws:s3:::codepipeline-us-east-1-*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ApplicationName}*'
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ApplicationName}*:*'
          - Effect: Allow
            Action:
              - ec2:AttachVolume
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CopyImage
              - ec2:CreateImage
              - ec2:CreateKeypair
              - ec2:CreateSecurityGroup
              - ec2:CreateSnapshot
              - ec2:CreateTags
              - ec2:CreateVolume
              - ec2:DeleteKeypair
              - ec2:DeleteSecurityGroup
              - ec2:DeleteSnapshot
              - ec2:DeleteVolume
              - ec2:DeregisterImage
              - ec2:DescribeImageAttribute
              - ec2:DescribeImages
              - ec2:DescribeInstances
              - ec2:DescribeRegions
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSnapshots
              - ec2:DescribeSubnets
              - ec2:DescribeTags
              - ec2:DescribeVolumes
              - ec2:DetachVolume
              - ec2:GetPasswordData
              - ec2:ModifyImageAttribute
              - ec2:ModifyInstanceAttribute
              - ec2:ModifySnapshotAttribute
              - ec2:RegisterImage
              - ec2:RunInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
            Resource : "*"
        PolicyName: !Sub 'codepipeline-service-${ApplicationName}'
  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ec2:Describe*
                  - ec2:CreateSecurityGroup
                  - ec2:DeleteSecurityGroup
                  - ec2:AuthorizeSecurityGroup*
                  - ec2:RevokeSecurityGroup*
                  - autoscaling:*
                Effect: Allow
                Resource: '*'
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ApplicationName}-Build"
      Description: !Ref ApplicationName
      ServiceRole: !GetAtt BuildIAMRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref BuildContainer
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10
  ImageBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ApplicationName}-AMI"
      Description: !Ref ApplicationName
      ServiceRole: !GetAtt BuildIAMRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:1.11.2
        EnvironmentVariables:
        - Name: APPLICATION_NAME
          Value: !Ref ApplicationName
        - Name: APPLICATION_ROLE
          Value: !Ref ApplicationRole
      Source:
        Type: CODEPIPELINE
        BuildSpec:
          Fn::Sub: |
            version: 0.1
            phases:
              install:
                commands:
                  - echo Install started on `date`
                  - echo Install packer
                  - wget -q https://releases.hashicorp.com/packer/${PackerVersion}/packer_${PackerVersion}_linux_amd64.zip -O /tmp/packer.zip
                  - unzip /tmp/packer.zip -d /usr/local/bin/
                  - rm -rf /tmp/packer.zip
              pre_build:
                commands:
                  - echo Pre Build Configuration `date`
                  - curl 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI > /tmp/credentials.json
              build:
                commands:
                  - echo Build started on `date`
                  - packer build -var-file=/tmp/credentials.json -var 'aws_access_key=foo' -machine-readable packer.json | tee /tmp/packer.out
                  - "cat /tmp/packer.out | egrep 'artifact,0,id' | rev | cut -f1 -d, | cut -d: -f1 | rev > /tmp/ami.out"
                  - echo -n "$CODEBUILD_BUILD_ID" | sed "s/.*:\([[:xdigit:]]\{7\}\).*/\1/" > /tmp/build_id.out
                  - printf '{"AmiId":"%s", "BuildId":"%s"}' "$(cat /tmp/ami.out)" "$(cat /tmp/build_id.out)" > /tmp/build.json
              post_build:
                commands:
                  - zip nodeJsHelloWorld.zip -r * .[^.]*
                  - echo Build completed on `date`
            artifacts:
              files: /tmp/build.json
              discard-paths: yes
      TimeoutInMinutes: 10
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets: !Ref ElbSubnets
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: "HTTP:80/"
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
      - !Ref ElbSecurityGroup
  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access.
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: TCP
        ToPort: 80
      VpcId: !Ref VpcId
  CodePipelineStack:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref CodePipelineBucket
        Type: S3
      Name: !Sub '${ApplicationName}-${ApplicationRole}'
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      -
        Name: Source
        Actions:
        - Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          Configuration:
            Owner: !Ref GitHubOwner
            Repo: !Ref GitHubRepository
            Branch: !Ref GitHubBranch
            OAuthToken: !Ref OAuthToken
          InputArtifacts: []
          OutputArtifacts:
          - Name: GitHub
          RunOrder: 1
      - Name: Build
        Actions:
        -
          Name: CodeBuild
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          Configuration:
            ProjectName: !Ref CodeBuildProject
          InputArtifacts:
          - Name: GitHub
          OutputArtifacts:
          - Name: Build
          RunOrder: 1
        -
          Name: ImageBuild
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          Configuration:
            ProjectName: !Ref ImageBuildProject
          InputArtifacts:
          - Name: Build
          OutputArtifacts:
          - Name: Image
          RunOrder: 2
      - Name: Deploy
        Actions:
          -
            Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: '1'
              Provider: CloudFormation
            Configuration:
              ActionMode: CREATE_UPDATE
              StackName: !Sub "${ApplicationName}-${ApplicationRole}-ASG"
              Capabilities: CAPABILITY_NAMED_IAM
              TemplatePath: Build::cfn-asg-env.yaml
              TemplateConfiguration: !Sub "Build::cloudformation.cfn.config"
              RoleArn: !GetAtt CFNRole.Arn
              ParameterOverrides: !Sub |
                {
                  "AmiId" : { "Fn::GetParam" : [ "Image", "build.json", "AmiId" ] },
                  "KeyPairName": "${KeyPairName}",
                  "ApplicationName": "${ApplicationName}",
                  "ApplicationRole": "${ApplicationRole}",
                  "ApplicationVersion" : { "Fn::GetParam" : [ "Image", "build.json", "BuildId" ] },
                  "Environment": "development",
                  "NetworkPrefix": "${NetworkPrefix}",
                  "LoadBalancer": "${ElasticLoadBalancer}"
                }
            InputArtifacts:
              - Name: Image
              - Name: Build
            RunOrder: 1

Outputs:
  Output:
    Description: String
    Value: String
  ElbSecurityGroup:
    Description: ELB Security group
    Value: !Ref ElbSecurityGroup
    Export:
      Name: !Sub "${ApplicationName}-${ApplicationRole}-development-elb-securitygroup"
  PipelineUrl:
    Description: Pipeline Url
    Value: !Sub "https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${CodePipelineStack}"